{
    "tiddlers": {
        "$:/plugins/danielo515/autotag/startup/tagger.js": {
            "text": "/*\\\ntitle: $:/plugins/danielo515/autotag/startup/tagger.js\ntype: application/javascript\nmodule-type: startup\n\n\\*/\n\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n// Export name and synchronous status\nexports.name = \"autotagger\";\nexports.after = [\"startup\"];\nexports.platforms = [\"browser\"];\nexports.synchronous = true;\n\nexports.startup = function(callback) {\n\nvar getTags=$tw.wiki.compileFilter(\"[tags[]!is[system]sort[title]]\"),\n    cache={};\n\nfunction autotag(changes){\n    var allTags=getTags(),\n        tagsRegex=new RegExp(allTags.join(\"|\")),\n        taggedTiddlers=[];\n    $tw.utils.each(changes,function(tidInfo,title){\n     //if the title is on the cache it means we are tagging the same tiddler twice in a row, so skip it\n     // and remove it from the cache for future calls\n        if(cache[title]){\n            delete cache[title];\n            return;\r\n        }\n        if( !/^Draft of|^\\$:\\//.test(title) && changes[title].modified){\n            /*If the title is not a system one or draft we operate on it*/\n            var tiddler=$tw.wiki.getTiddler(title).fields;\n                if(tagsRegex.test(tiddler.text))\n                {\n                    /*If any of the tags is contained on the tiddler text, then create a new array to host the new set of tags*/\n                    var newTags=[];\n                        for(var i=0,x=allTags.length;i<x;i++){\n                            if( tiddler.text.indexOf(allTags[i]) !==-1 && ( tiddler.tags === undefined || tiddler.tags.indexOf(allTags[i]) ==-1 )){\n                                newTags.push(allTags[i]);\r\n                            }\r\n                        }\n                    console.log(newTags);\n                    cache[title]=true; // save the processed tiddler on the cache to avoid edit loops\n                    taggedTiddlers.push(new $tw.Tiddler(tiddler,{tags: tiddler.tags ? newTags.concat(tiddler.tags) : newTags })); //only concatenate if the source tiddler has tagsS\n                }\n        }\n        \r\n    });\n    $tw.wiki.addTiddlers(taggedTiddlers);\r\n};\n    $tw.wiki.addEventListener(\"change\",autotag);\n\n};\n\n})();",
            "title": "$:/plugins/danielo515/autotag/startup/tagger.js",
            "type": "application/javascript",
            "module-type": "startup"
        },
        "$:/plugins/danielo515/autotag/readme": {
            "title": "$:/plugins/danielo515/autotag/readme",
            "text": "This plugin tags tiddler automatically based on their content. It only adds tags that exists already on the wiki.\nThe only way it can be deactivated is disabling or uninstalling it.\n\nGithub: [[]]https://github.com/danielo515/TW5-AutoTag]]\n"
        }
    }
}